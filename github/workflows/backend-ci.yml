name: Backend CI/CD

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        ports: [ "6379:6379" ]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: PostgresDev2024!
          POSTGRES_USER: postgres
          POSTGRES_DB: app_test
        ports: [ "5433:5432" ]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      FLASK_APP: wsgi.py
      FLASK_ENV: testing
      DATABASE_URL: postgresql://postgres:PostgresDev2024!@localhost:5433/app_test
      REDIS_URL: redis://localhost:6379/0
      RATE_LIMIT_ENABLED: "true"
      CORS_ENABLED: "true"
      ALLOWED_ORIGINS: http://localhost:3000
      JWT_SECRET_KEY: test-secret-key

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov flake8 black mypy

      - name: Run database migrations
        run: flask db upgrade

      - name: Check formatting
        run: black . --check

      - name: Lint code
        run: flake8 . --max-line-length=100 --exclude=migrations

      - name: Type check
        run: mypy .

      - name: Run tests with coverage
        run: |
          pytest --cov=app --cov-report=xml --cov-fail-under=80 -v

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker
        run: gcloud auth configure-docker
        
      - name: Build image
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/wissahickon-backend:${{ github.sha }} .
          docker tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/wissahickon-backend:${{ github.sha }} gcr.io/${{ secrets.GCP_PROJECT_ID }}/wissahickon-backend:latest

      - name: Push image
        run: |
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/wissahickon-backend:${{ github.sha }}
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/wissahickon-backend:latest